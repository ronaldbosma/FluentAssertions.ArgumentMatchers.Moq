# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core
# YAML schema reference:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema

trigger:
- master

stages:

- stage: 'Build'
  variables:
    buildConfiguration: 'Release'
    sonarQubeProject: 'FluentAssertions.ArgumentMatchers.Moq'

  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'

    workspace:
      clean: all

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk'
      inputs:
        packageType: sdk
        version: 6.0.x
        installationPath: $(Agent.ToolsDirectory)/dotnet
    
    - task: DotNetCoreCLI@2
      displayName: "NuGet Restore"
      inputs:
        command: restore
        projects: 'src/**/*.csproj'
    
    - task: SonarQubePrepare@4
      enabled: false
      inputs:
        SonarQube: 'SonarQube'
        scannerMode: 'MSBuild'
        projectKey: '$(sonarQubeProject)'
        projectName: '$(sonarQubeProject)'
        extraProperties: |
          sonar.login=$(SonarQubeUserName)
          sonar.password=$(SonarQubePassword)
          sonar.cs.opencover.reportsPaths="$(Build.SourcesDirectory)/TestResults/Coverage.opencover.xml"
        # I'm passing in the SonarQube username and password because the token doesn't seem to be send to SonarQube
    
    - task: DotNetCoreCLI@2
      displayName: "Build Solution"
      inputs:
        command: build
        projects: 'src/**/*.csproj'
        arguments: '--configuration $(buildConfiguration) --no-restore'

    - task: DotNetCoreCLI@2
      displayName: 'Run Tests'
      inputs:
        command: test
        projects: 'src/**/*[Tt]ests/*.csproj'
        arguments: '--configuration $(buildConfiguration) --no-restore --logger trx /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput="$(Build.SourcesDirectory)/TestResults/Coverage"'
    
    - task: SonarQubeAnalyze@4
      enabled: false
    
    - task: DotNetCoreCLI@2
      displayName: 'Create NuGet Package - Release Version'
      inputs:
        command: pack
        searchPatternPack: 'src/FluentAssertions.ArgumentMatchers.Moq/FluentAssertions.ArgumentMatchers.Moq.csproj'
        packDirectory: '$(Build.ArtifactStagingDirectory)/packages/releases'
        arguments: '--configuration $(buildConfiguration)'
        nobuild: true
    
    - task: DotNetCoreCLI@2
      displayName: 'Create NuGet Package - Prerelease Version'
      inputs:
        command: pack
        buildProperties: 'VersionSuffix="$(Build.BuildNumber)"'
        searchPatternPack: 'src/FluentAssertions.ArgumentMatchers.Moq/FluentAssertions.ArgumentMatchers.Moq.csproj'
        packDirectory: '$(Build.ArtifactStagingDirectory)/packages/prereleases'
        arguments: '--configuration $(buildConfiguration)'
        
    - publish: '$(Build.ArtifactStagingDirectory)/packages'
      artifact: 'packages'
        


- stage: 'PublishPrereleaseNuGetPackage'
  displayName: 'Publish Prerelease NuGet Package'
  dependsOn: 'Build'
  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - checkout: none

    - download: current
      artifact: 'packages'

    - task: NuGetCommand@2
      displayName: 'Push NuGet Package'
      inputs:
        command: 'push'
        packagesToPush: '$(Pipeline.Workspace)/packages/prereleases/*.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: 'Test'


        
- stage: 'PublishReleaseNuGetPackage'
  displayName: 'Publish Release NuGet Package'
  dependsOn: 'Build'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - checkout: none

    - download: current
      artifact: 'packages'
      
    #- task: NuGetAuthenticate@1

    - task: NuGetCommand@2
      displayName: 'Push NuGet Package'
      inputs:
        command: 'push'
        packagesToPush: '$(Pipeline.Workspace)/packages/releases/*.nupkg'
        nuGetFeedType: 'external'
        publishFeedCredentials: 'NuGet'



- stage: 'TestPublishedPackage'
  displayName: 'Test Published Package with Dependencies'
  dependsOn:
  - PublishPrereleaseNuGetPackage
  - PublishReleaseNuGetPackage
  condition: or(succeeded('PublishPrereleaseNuGetPackage'), succeeded('PublishReleaseNuGetPackage'))
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'

    workspace:
      clean: all

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk'
      inputs:
        packageType: sdk
        version: 6.0.x
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - task: DotNetCoreCLI@2
      displayName: "NuGet Restore"
      inputs:
        command: restore
        projects: 'tests/**/*.csproj'
        feedsToUse: config
        nugetConfigPath: 'tests/NuGet.config'

    - task: DotNetCoreCLI@2
      displayName: "Build Solution"
      inputs:
        command: build
        projects: 'tests/**/*.csproj'
        arguments: '--no-restore'

    - task: DotNetCoreCLI@2
      displayName: 'Run Tests'
      inputs:
        command: test
        projects: 'tests/**/*.csproj'
        arguments: '--no-restore'